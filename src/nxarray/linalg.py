from typing import Tuple, Hashable, Callable, Any, TypeVar
from functools import reduce
from numpy import reshape
from numpy.typing import NDArray
from numpy.linalg import qr as npqr
from nxarray.core import NXArray

T = TypeVar("T")

def _split(something: Tuple[T, ...], pos: int) -> Tuple[Tuple[T, ...], Tuple[T, ...]]:
    assert pos >= 0, pos
    assert len(something) >= pos, pos
    return something[:pos], something[pos:]


def _release_normalized_reshaped_array(
    nxarr: NXArray, shape: Tuple[int, ...]
) -> NDArray:
    return reshape(nxarr.release_normalized_array(*nxarr.index_ids), shape)


def _decompose(
    split_nxarray: Tuple[int, NXArray],
    func: Callable[[NDArray], Tuple[NDArray, NDArray]],
    new_index_id: Hashable,
) -> Tuple[NXArray, NXArray]:
    pos, nxarr = split_nxarray
    log_norm = nxarr.log_norm
    left_shape, right_shape = _split(nxarr.shape, pos)
    left_indices, right_indices = _split(nxarr.index_ids, pos)
    if new_index_id in left_indices or new_index_id in right_indices:
        raise ValueError(f"ID of a new index \"{new_index_id}\" induced by a decomposition is already presend among IDs of the decomposed array.")
    left_dim = reduce(lambda x, y: x * y, left_shape)
    arr = _release_normalized_reshaped_array(nxarr, (left_dim, -1))
    left_arr, right_arr = func(arr)
    left_arr = reshape(left_arr, (*left_shape, -1))
    right_arr = reshape(right_arr, (-1, *right_shape))
    left_nxarr = NXArray(left_arr, *left_indices, new_index_id)
    right_nxarr = NXArray(right_arr, new_index_id, *right_indices)
    right_nxarr._log_norm += log_norm
    return left_nxarr, right_nxarr


"""Performs QR decomosition of an array with respect to a fixed splitting.

Args:
    split_nxarray: an array with the fixed splitting (__getitem__ method to see how
        fix splitting);
    new_index_id: name of the axis which is generated by the decomposition.

Returns: Q and R as ywo NXArrays.

Raises:
    ValueError: raises when the `new_index_id` ID is already present in the decomposed array;
    LinearAlgebraError: raises when the factoring fails.
"""

def qr(
    split_nxarray: Tuple[int, NXArray], new_index_id: Hashable
) -> Tuple[NXArray, NXArray]:
    return _decompose(split_nxarray, npqr, new_index_id)
